src
	-main
		-java
			-package
	-test
		-java
			-package
	resurces

	
mvn -v 查看maven版本
	compile 编译
	test    测试
	package 打包
	
	clean	删除target
	install	安装jar包到本地仓库中
	
	创建目录的两种方式：
	1.archetype:generate 按照提示进行选择
	2.archetype:generate	-DgroupId=组织名.公司网址的反写+项目名
							-DartifactId=项目名-模块名
							-Dversion=版本号
							-Dpackage=代码所存在的包名
	
	坐标
		构件
	仓库
		本地仓库和远程仓库（全球中央仓库）
	镜像仓库
		原
		<mirror>
			<id>mirrorId</id>
			<mirrorOf>repositoryId</mirrorOf>
			<name>Human Readable Name for this Mirror.</name>
			<url>http://my.repository.com/repo/path</url>
		</mirror>
		改成阿里云的
		<mirrors>
			<mirror>
				<id>alimaven</id>
				<name>aliyun maven</name>
				<url>http://maven.aliyun.com/nexus/content/groups/public/</url>
				<mirrorOf>central</mirrorOf>
			</mirror>
		</mirrors>
	更改本地仓库位置
		默认放在用户的.m2文件夹里
		
	在Eclipse中安装maven插件
	Window > Preferences > Java > Installed JREs > 选择你的jdk安装路径（记得是jdk，不是jre）
	Window > Preferences > Java > Installed JREs > 选择你的jdk安装路径（记得是jdk，不是jre）
	在此解释一下jdk,jre,jvm
		JDK（Java Development Kit）
		　　JDK是Java开发工具包，是Sun Microsystems针对Java开发员的产品。
		　　JDK中包含JRE，在JDK的安装目录下有一个名为jre的目录，里面有两个文件夹bin和lib，在这里可以认为bin里的就是jvm，lib中则是jvm工作所需要的类库，而jvm和 lib和起来就称为jre。
		　　JDK是整个JAVA的核心，包括了Java运行环境JRE（Java Runtime Envirnment）、一堆Java工具（javac/java/jdb等）和Java基础的类库（即Java API 包括rt.jar）。
		　　①SE(J2SE)，standard edition，标准版，是我们通常用的一个版本，从JDK 5.0开始，改名为Java SE。
		　　②EE(J2EE)，enterprise edition，企业版，使用这种JDK开发J2EE应用程序，从JDK 5.0开始，改名为Java EE。
		　　③ME(J2ME)，micro edition，主要用于移动设备、嵌入式设备上的java应用程序，从JDK 5.0开始，改名为Java ME。
			金字塔结构 JDK=JRE+JVM+其它 运行Java程序一般都要求用户的电脑安装JRE环境（Java Runtime Environment）；
			没有jre，java程序无法运行；而没有java程序，jre就没有用武之地。
		Java Runtime Environment（JRE）
		　　是运行基于Java语言编写的程序所不可缺少的运行环境。也是通过它，Java的开发者才得以将自己开发的程序发布到用户手中，让用户使用。
		　　RE中包含了Java virtual machine（JVM），runtime class libraries和Java application launcher，这些是运行Java程序的必要组件。
		　　与大家熟知的JDK不同，JRE是Java运行环境，并不是一个开发环境，所以没有包含任何开发工具（如编译器和调试器），只是针对于使用Java程序的用户。
　　	JVM（java virtual machine）
		　　就是我们常说的java虚拟机，它是整个java实现跨平台的最核心的部分，所有的java程序会首先被编译为.class的类文件，这种类文件可以在虚拟机上执行。
		　　也就是说class并不直接与机器的操作系统相对应，而是经过虚拟机间接与操作系统交互，由虚拟机将程序解释给本地系统执行。
		　　只有JVM还不能成class的执行，因为在解释class的时候JVM需要调用解释所需要的类库lib，而jre包含lib类库。
		　　JVM屏蔽了与具体操作系统平台相关的信息，使得Java程序只需生成在Java虚拟机上运行的目标代码（字节码），就可以在多种平台上不加修改地运行。

完整的项目构建过程包括：
	清理，编译，测试，打包，集成测试，验证，部署
	maven生命周期
		clean	清理项目
			pre-clean	执行清理前的工作
			clean		清理上一次构建生成的所有文件
			post-clean	执行清理后的文件
		default	构建项目
			compile test package install.
		site	生成项目站点
			pre-site	在生成项目站点前要完成的工作
			site		生成项目的站点文档
			post-site	在生成项目站点后要完成的工作
			site-deploy	发布生成的站点到服务器上
	maven生命周期
	clean compile test package install.

pom.xml常用元素介绍
	<project></project>
	<modelVestion></modelVestion> 指定了当前pom的版本
	
	<groupId>反写的公司网址+项目名</groupId>
	<artifactId>项目名+模块名</artifactId>
	<!-- 第一个0表示大版本号 第二个0表示分支版本号 第三个0表示小版本号
			0.0.1
			snapshot快照
			alpha 内部测试
			beta 公测
			Release 稳定
			GA 正式发布
	-->
	<vesion>当前项目的版本号</version> 
	<!-- 表示maven的打包方式，默认的jar。还可以是war zip pom-->
	<packaging></packaging>
	<!--项目描述名-->
	<name></name>
	<!--项目地址-->
	<url></url>
	<!--项目描述名-->
	<description></description>
	<developers></developers>
	<licenses></licenses>
	<organization></organization>
	<!--依赖列表-->
	<dependencies>
		<!--依赖项-->
			<dependency>
				<!-- 指定坐标-->
				<groupId></groupId>
				<artifactId></artifactId>
				<version></version>
				<!--指定类型-->
				<type></type>
				<!--指定依赖范围-->
				<!--表示jar只在测试的范围有用，在主代码没用，会报错-->
				<scope>test</scope>
				<!--设置依赖是否可选，默认是false -->
				<optional></optional>
				<!--排除依赖传递列表-->
				<exclusions>
					<exclusion></exclusion>
				</exclusions>
			</dependency>
	</dependencies>
	
	<!-- 依赖的管理-->
	<dependencyManagement>
		<dependencies>
			<dependency></dependency>
		</dependencies>
	</dependencyManagement>
	
	<build>
		<!--插件列表-->
		<plugins>
			<plugin>
				<groupId></groupId>
				<artifactId></artifactId>
				<version></version>
			</plugin>
		</plugins>
	</build>
	
	<!-- -->
	<parent></parent>
	<!-- -->
	<modules>
		<module>
		</module>
	</modules>

依赖的范围
	maven中提供了三种范围
		compile:默认的范围，变异测试运行都有效
		provided:只在编译和测试时有效
		runtime:在测试和运行时有效
		test:只会在测试范围有效
		system:在编译和测试时有效，系统相关 不可移植性
		import:导入的范围，它只使用在dependencyManagement中,表示从其他的pom中导入（继承）dependency的配置
	<scope></scope>
依赖传递
	例：古惑仔中山鸡依赖南哥，南哥依赖逼哥。
	创建三个maven工程，hongxing-bge hongxing-nage hongxing-shanji
	先将hongxing-bge package install到本地仓库中
	然后在hongxing-nage的pom.xml中加入对bge的依赖
	之后在将hongxing-nage package install到本地仓库中
	然后在hongxing-shanji的pom.xml中加入对nage的依赖
	之后hongxing-shanji自动依赖于hongxing-bge
依赖的排除
	那么问题来了有一天山鸡为表忠心对南哥说我只听你的，这时就要排除对逼哥的依赖了
	在hongxing-shanji的pom.xml中加入exclusion标签。
依赖的冲突
	1.短路优先
		A->b->c->x
		A->d-x
		优先解析依赖短的第二条。
	2.长度相同的情况下先声明先优先
聚合和继承
	例如：将逼哥和南哥和山鸡聚合。
			新建一个maven工程hongxingaggration修改pom.xml
				加入
					<modules>
						<module>../hongxing-bge</module>
						<module>../hongxing-nage</module>
						<module>../hongxing-shanji</module>
					</modules>
			之后clean install
	继承：